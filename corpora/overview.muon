#!/usr/bin/env muldisre

`Muldis_Content_Predicate
MCP version https://muldis.com 0.300.0 MCP
MCP script Unicode 2.1 UTF-8 MCP
MCP syntax Muldis_Object_Notation https://muldis.com 0.300.0 MCP
MCP model Muldis_Data_Language https://muldis.com 0.300.0 MCP
Muldis_Content_Predicate`

`#########################################################################`
`#########################################################################`

(

`#########################################################################`

    `$$$` Ignorance : (

        0sIGNORANCE,

    ),

`#########################################################################`

    `$$$` Boolean : (

        0bFALSE,

        0bTRUE,

    ),

`#########################################################################`

    `$$$` Integer : (

        0,

        1,

        -3,

        +42,

        `USA national debt in US dollars close to midnight of 2017 Dec 31.`
        20_597_460_196_915,

        `Mersenne Prime 2^521-1, 157 digits, discovered 1952 Jan 30.`
        68_64797
            66013_06097_14981_90079_90813_93217_26943_53001_43305_40939
            44634_59185_54318_33976_56052_12255_96406_61454_55497_72963
            11391_48085_80371_21987_99971_66438_12574_02829_11150_57151,

        0d39,

        0xDEADBEEF,

        0o644,

        0b11001001,

    ),

`#########################################################################`

    `$$$` Fraction : (

        0.0,

        1.0,

        -4.72,

        +4.72,

        0/1,

        1/1,

        5/3,

        -472/100,

        +472/100,

        15_485_863/32_452_843,

        `First 101 digits of transcendental number π.`
        3.14159_26535_89793_23846_26433_83279_50288_41971_69399_37510
            58209_74944_59230_78164_06286_20899_86280_34825_34211_70679,

        `Mersenne Primes 2^107-1 divided by 2^127-1.`
        162259276829213363391578010288127
            /170141183460469231731687303715884105727,

        4.5207196*10^37,

        0xDEADBEEF.FACE,

        -0o35/0o3,

        0b1.1,

        0b1.011101101*0b10^-0b11011,

    ),

`#########################################################################`

    `$$$` Calendar_Time : (

        `No measurement was taken or specified at all.`
        0Lct,

        `Either an unspecified period in 1970 or a duration of 1970 years.`
        0Lct@y1970,

        `Either a civil calendar date 2015-5-3 or a duration of 2015y+5m+3d.`
        0Lct@y2015|m5|d3,

        `Either a military calendar date 1998-300 or a duration of 1998y+300d.`
        0Lct@y1998|d300,

        `Either the 6th week of 1776 or a duration of 1776 years + 6 weeks.`
        0Lct@y1776|d42,

        `Either the first quarter of 1953 or a duration of 1953.25 years.`
        0Lct@y1953.25,

        `Either high noon on an unspecified day or a duration of 12 hours.`
        0Lct@h12|i0|s0,

        `Either a fully specified civil date and time or a 6-part duration.`
        0Lct@y1884|m10|d17|h20|i55|s30,

        `Either an ancient date and time or a negative duration.`
        0Lct@y-370|m1|d24|h11|i0|s0,

        `Either a time on some unspecified day or a duration of seconds.`
        0Lct@s5923.21124603,

    ),

`#########################################################################`

    `$$$` Calendar_Duration : (

        `Addition of 2 years and 3 months.`
        0Lcd@y2|m3|d0|h0|i0|s0,

        `Subtraction of 22 hours.`
        0Lcd@y0|m0|d0|h-22|i0|s0,

    ),

`#########################################################################`

    `$$$` Calendar_Instant : (

        `The Day The Music Died (if paired with Gregorian calendar).`
        0Lci@y1959|m2|d3,

        `A time of day when one might have breakfast.`
        0Lci@h7|i30|s0,

        `What was now in the Pacific zone (if paired with Gregorian calendar).`
        0Lci@y2018|m9|d3|h20|i51|s17@h-8|i0|s0,

        `A time of day in the UTC zone on an unspecified day.`
        0Lci@h9|i25|s0@h0|i0|s0,

        `A specific day and time in the Pacific Standard Time zone.`
        0Lci@y2001|m4|d16|h20|i1|s44@"PST",

    ),

`#########################################################################`

    `$$$` Geographic_Point : (

        `No specified coordinates at all.`
        0Lgp,

        `Just an elevation specified.`
        0Lgp@+920,

        `Geographic surface coordinates of Googleplex; elevation not specified.`
        0Lgp@>-122.0857017|^37.4218363,

        `Same thing.`
        0Lgp@^37.4218363|>-122.0857017,

        `Some location with all coordinates specified.`
        0Lgp@>-101|^-70|+1000,

        `Another place.`
        0Lgp@>-94.746094|^37.483577,

    ),

`#########################################################################`

    `$$$` Bits : (

        0bb,

        0bb00101110100010,

        0bb00101110_100010,

        0bo644,

        0bxA705E,

    ),

`#########################################################################`

    `$$$` Blob : (

        0xx,

        0xxA705E416,

        0xxA705_E416,

        0xb00101110_10001011,

        `A quote from Thomas Hobbes' "Leviathan", as UTF-8 text encoded in Base64.`
        0xy
            TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz
            IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg
            dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu
            dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo
            ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=,

    ),

`#########################################################################`

    `$$$` Text : (

        "",

        Ceres,

        "サンプル",

        "\This isn't not escaped.\n",

        "\\<0cx263A>\<0c65>",

        `One non-ordered quoted Text (or, one named attribute).`
        "sales",

        `Same thing but nonquoted.`
        sales,

        `One attribute name with a space in it.`
        "First Name",

        `One ordered nonquoted Text (or, one ordered attribute).`
        0c0,

        `Same Text value (or, one ordered attr written in format of a named).`
        "\\<0c0>",

        `From a graduate student (in finals week), the following haiku:`
        "\study, write, study,\n"
            "\do review (each word) if time.\n"
            "\close book. sleep? what's that?\n",

    ),

`#########################################################################`

    `$$$` Nesting : (

        ::person,

        ::person::birth_date,

        ::person::birth_date::year,

        ::the_db::stats::"samples by order",

    ),

`#########################################################################`

    `$$$` Pair : (

        `Pair of Integer.`
        (5: -3),

        `Pair of Text.`
        ("First Name": Joy),

        `Another Pair.`
        (x:y),

        `Same thing.`
        (x->y),

        `Same thing.`
        (y<-x),

    ),

`#########################################################################`

    `$$$` Tuple : (

        `Zero attributes.`
        (),

        `One named attribute.`
        ("First Name": Joy,),

        `One ordered attribute.`
        (53,),

        `Same thing.`
        (0c0: 53,),

        `Same thing.`
        ("\\<0c0>": 53,),

        `Three named attributes.`
        (
            login_name : hartmark,
            login_pass : letmein,
            is_special : 0bTRUE,
        ),

        `Three ordered attributes.`
        (hello,26,0bTRUE),

        `One of each.`
        (Jay, age: 10),

        `A non-Latin name.`
        ("サンプル": "http://example.com",),

        `Two named attributes.`
        (
            name : Michelle,
            age  : 17,
        ),

        `Five leaf attributes in nested multi-level namespace.`
        (
            name: "John Glenn",
            ::birth_date::year: 1921,
            comment: "Fly!",
            ::birth_date::month: 7,
            ::birth_date::day: 18,
        ),

        `Same thing.`
        (
            name: "John Glenn",
            birth_date: (
                year: 1921,
                month: 7,
                day: 18,
            ),
            comment: "Fly!",
        ),

    ),

`#########################################################################`

    `$$$` Lot : (

        `Zero members.`
        {},

        `One member.`
        { "The lonely only." },

        `Four members.`
        {
            Clubs  :  5,
            Diamonds,
            Hearts : 10,
            Spades : 20,
        },

    ),

`#########################################################################`

    `$$$` Interval : (

        `Empty interval (zero members).`
        [],

        `Unit interval (one member).`
        [abc],

        `Closed interval (probably 10 members, depending on the model used).`
        [1..10],

        `Left-closed, right-open interval; every Fraction x in [2.7<=x<9.3].`
        [2.7..-9.3],

        `Left-open, right-closed interval; every Text x ordered in [a<x<=z].`
        [a-..z],

        `Open interval; time period between Dec 6 and 20 excluding both.`
        [0Lci@y2002|m12|d6@"UTC" -..- 0Lci@y2002|m12|d20@"UTC"],

        `Left-unbounded, right-closed interval; every Integer <= 3.`
        [*..3],

        `Left-closed, right-unbounded interval; every Integer >= 29.`
        [29..*],

        `Universal interval; unbounded; every value of type system is a member.`
        [*..*],

    ),

`#########################################################################`

    `$$$` Array : (

        `Zero members.`
        (Array:{}),

        `One member.`
        (Array:{ "You got it!" }),

        `Three members.`
        (Array:{
            Alphonse,
            Edward,
            Winry,
        }),

        `Five members (1 duplicate).`
        (Array:{
            57,
            45,
            63,
            61,
            63,
        }),

        `32 members (28 duplicates in 2 runs).`
        (Array:{
            "/",
            "*" : 20,
            "+" : 10,
            "-",
        }),

    ),

`#########################################################################`

    `$$$` Set : (

        `Zero members.`
        (Set:{}),

        `One member.`
        (Set:{ "I know this one!" }),

        `Four members (no duplicates).`
        (Set:{
            Canada,
            Spain,
            Jordan,
            Jordan,
            Thailand,
        }),

        `Three members.`
        (Set:{
            3,
            16,
            85,
        }),

        `Two members.`
        (Set:{
            21 : 0bTRUE,
            62 : 0bFALSE,
            3 : 0bTRUE,
            101 : 0bFALSE,
        }),

    ),

`#########################################################################`

    `$$$` Bag : (

        `Zero members.`
        (Bag:{}),

        `One member.`
        (Bag:{ "I hear that!": 1 }),

        `1200 members (1197 duplicates).`
        (Bag:{
            Apple  : 500,
            Orange : 300,
            Banana : 400,
        }),

        `Six members (2 duplicates).`
        (Bag:{
            Foo : 1,
            Quux : 1,
            Foo : 1,
            Bar : 1,
            Baz : 1,
            Baz : 1,
        }),

    ),

`#########################################################################`

    `$$$` Mix : (

        `Zero members; we measured zero of nothing in particular.`
        (Mix:{}),

        `One member; one gram of mass.`
        (Mix:{::Gram: 1.0}),

        `29.95 members (28.95 duplicates); the cost of a surgery.`
        (Mix:{::USD: 29.95}),

        `9.8 members; acceleration under Earth's gravity.`
        (Mix:{::Meter_Per_Second_Squared: 9.8}),

        `0.615 members (fractions of 3 distinct members); recipe.`
        (Mix:{
            ::Butter : 0.22,
            ::Sugar  : 0.1,
            ::Flour  : 0.275,
            ::Sugar  : 0.02,
        }),

        `4/3 members (fractions of 3 distinct members); this-mix.`
        (Mix:{
            Sugar: 1/3,
            Spice: 1/4,
            All_Things_Nice: 3/4,
        }),

        `-1.5 members; adjustment for recipe.`
        (Mix:{
            Rice: +4.0,
            Beans: -5.7,
            Carrots: +0.2,
        }),

    ),

`#########################################################################`

    `$$$` Interval_Set : (

        `Empty interval-set (zero members).`
        (Interval_Set:{}),

        `Unit interval-set (one member).`
        (Interval_Set:{abc}),

        `Probably 10 members, depending on the model used.`
        (Interval_Set:{1..10}),

        `Probably 6 members.`
        (Interval_Set:{1..3,6,8..9}),

        `Every Integer x except for {4..13,22..28}`
        (Interval_Set:{*..3,14..21,29..*}),

        `Set of all valid Unicode code points.`
        (Interval_Set:{0..0xD7FF,0xE000..0x10FFFF}),

        `Probably 15 members (no duplicates), depending on the model used.`
        (Interval_Set:{1..10,6..15}),

        `Probably same thing, regardless of data model used.`
        (Interval_Set:{1..-6,6..10:2,10-..15}),

    ),

`#########################################################################`

    `$$$` Interval_Bag : (

        `Empty interval-bag (zero members).`
        (Interval_Bag:{}),

        `Unit interval-bag (one member).`
        (Interval_Bag:{abc}),

        `Five members (4 duplicates).`
        (Interval_Bag:{def:5}),

        `Probably 20 members (5 duplicates), depending on the model used.`
        (Interval_Bag:{1..10,6..15}),

        `Probably same thing, regardless of data model used.`
        (Interval_Bag:{1..-6,6..10:2,10-..15}),

    ),

`#########################################################################`

    `$$$` Tuple_Array : (

        `Zero attributes + zero tuples.`
        (Tuple_Array:()),

        `Zero attributes + one tuple.`
        (Tuple_Array:{()}),

        `Three named attributes + zero tuples.`
        (Tuple_Array:(x,y,z)),

        `Three positional attributes + zero tuples.`
        (Tuple_Array:(0c0,0c1,0c2)),

        `Two named attributes + three tuples (1 duplicate).`
        (Tuple_Array:{
            (name: Amy     , age: 14),
            (name: Michelle, age: 17),
            (name: Amy     , age: 14),
        }),

        `Two positional attributes + two tuples.`
        (Tuple_Array:{
            (Michelle, 17),
            (Amy     , 14),
        }),

    ),

`#########################################################################`

    `$$$` Relation : (

        `Zero attributes + zero tuples.`
        (Relation:()),

        `Zero attributes + one tuple.`
        (Relation:{()}),

        `Three named attributes + zero tuples.`
        (Relation:(x,y,z)),

        `Three positional attributes + zero tuples.`
        (Relation:(0c0,0c1,0c2)),

        `Two named attributes + two tuples.`
        (Relation:{
            (name: Michelle, age: 17),
            (name: Amy     , age: 14),
        }),

        `Two positional attributes + two tuples.`
        (Relation:{
            (Michelle, 17),
            (Amy     , 14),
        }),

       `Some people records.`
        (Relation:{
            (name : "Jane Ives", birth_date : 0Lci@y1971|m11|d06,
                phone_numbers : (Set:{"+1.4045552995", "+1.7705557572"})),
            (name : "Layla Miller", birth_date : 0Lci@y1995|m08|d27,
                phone_numbers : (Set:{})),
            (name : "岩倉 玲音", birth_date : 0Lci@y1984|m07|d06,
                phone_numbers : (Set:{"+81.9072391679"})),
        }),

    ),

`#########################################################################`

    `$$$` Tuple_Bag : (

        `Zero attributes + zero tuples.`
        (Tuple_Bag:()),

        `Zero attributes + one tuple.`
        (Tuple_Bag:{()}),

        `Three named attributes + zero tuples.`
        (Tuple_Bag:(x,y,z)),

        `Three positional attributes + zero tuples.`
        (Tuple_Bag:(0c0,0c1,0c2)),

        `Two named attributes + six tuples (4 duplicates).`
        (Tuple_Bag:{
            (name: Michelle, age: 17),
            (name: Amy     , age: 14) : 5,
        }),

        `Two positional attributes + two tuples.`
        (Tuple_Bag:{
            (Michelle, 17),
            (Amy     , 14),
        }),

    ),

`#########################################################################`

    `$$$` Article : (

        (Article:(::Point : (x : 5, y : 3))),

        (Article:(::Float : (
            significand : 45207196,
            radix       : 10,
            exponent    : 37,
        ))),

        (Article:(::the_db::UTCDateTime : (
            year   : 2003,
            month  : 10,
            day    : 26,
            hour   : 1,
            minute : 30,
            second : 0.0,
        ))),

        (Article:::Positive_Infinity),

        (Article:::Negative_Zero),

    ),

`#########################################################################`

    `$$$` Excuse : (

        (Excuse:(::Input_Field_Wrong : (name : "Your Age"))),

        (Excuse:::Div_By_Zero),

        (Excuse:::No_Such_Attr_Name),

    ),

`#########################################################################`

    `$$$` Heading : (

        `Zero attributes.`
        (Heading:()),

        `One named attribute.`
        (Heading:(sales)),

        `Same thing.`
        (Heading:("sales")),

        `One ordered attribute.`
        (Heading:(0c0)),

        `Same thing.`
        (Heading:("\\<0c0>")),

        `Three named attributes.`
        (Heading:(region,revenue,qty)),

        `Three ordered attributes.`
        (Heading:(0c0,0c1,0c2)),

        `One of each.`
        (Heading:(0c1,age)),

        `Some attribute names can only appear quoted.`
        (Heading:("Street Address")),

        `A non-Latin name.`
        (Heading:("サンプル")),

    ),

`#########################################################################`

    `$$$` Renaming : (

        `Zero renamings, a no-op.`
        (Renaming:()),

        `Also a no-op.`
        (Renaming:(age->age)),

        `Rename one attribute.`
        (Renaming:(fname->first_name)),

        `Same thing.`
        (Renaming:(first_name:fname)),

        `Swap 2 named attributes.`
        (Renaming:(foo->bar,foo<-bar)),

        `Convert ordered names to nonordered.`
        (Renaming:(->foo,->bar)),

        `Same thing.`
        (Renaming:(0c0->foo,0c1->bar)),

        `Convert nonordered names to ordered.`
        (Renaming:(<-foo,<-bar)),

        `Same thing.`
        (Renaming:(0c0:foo,0c1<-bar)),

        `Swap 2 ordered attributes.`
        (Renaming:(0c0->0c1,0c0<-0c1)),

        `Same thing.`
        (Renaming:(->0c1,->0c0)),

        `Some attribute names can only appear quoted.`
        (Renaming:("First Name"->"Last Name")),

    ),

`#########################################################################`

)

`#########################################################################`
`#########################################################################`
