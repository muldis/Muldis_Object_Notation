#!/usr/bin/env muldisre

`Muldis_Content_Predicate
MCP version https://muldis.com 0.300.0 MCP
MCP script Unicode 2.1 UTF-8 MCP
MCP syntax Muldis_Object_Notation https://muldis.com 0.300.0 MCP
MCP model Muldis_Data_Language https://muldis.com 0.300.0 MCP
Muldis_Content_Predicate`

`#########################################################################`
`#########################################################################`

(

`#########################################################################`

    `$$$` Ignorance : (

        0iIGNORANCE,

    ),

`#########################################################################`

    `$$$` Boolean : (

        0bFALSE,

        0bTRUE,

    ),

`#########################################################################`

    `$$$` Integer : (

        0,

        1,

        -3,

        +42,

        `USA national debt in US dollars close to midnight of 2017 Dec 31.`
        20_597_460_196_915,

        `Mersenne Prime 2^521-1, 157 digits, discovered 1952 Jan 30.`
        68_64797
            66013_06097_14981_90079_90813_93217_26943_53001_43305_40939
            44634_59185_54318_33976_56052_12255_96406_61454_55497_72963
            11391_48085_80371_21987_99971_66438_12574_02829_11150_57151,

        `Base 10.`
        0d39,

        `Base 16.`
        0xDEADBEEF,

        `Base 8.`
        0o644,

        `Base 2.`
        0b11001001,

    ),

`#########################################################################`

    `$$$` Fraction : (

        0.0,

        1.0,

        -4.72,

        +4.72,

        0/1,

        1/1,

        5/3,

        -472/100,

        +472/100,

        15_485_863/32_452_843,

        `First 101 digits of transcendental number π.`
        3.14159_26535_89793_23846_26433_83279_50288_41971_69399_37510
            58209_74944_59230_78164_06286_20899_86280_34825_34211_70679,

        `Mersenne Primes 2^107-1 divided by 2^127-1.`
        162259276829213363391578010288127
            /170141183460469231731687303715884105727,

        `Base 10.`
        4.5207196*10^37,

        `Base 16.`
        0xDEADBEEF.FACE,

        `Base 8.`
        -0o35/0o3,

        `Base 2.`
        0b1.1,

        `Base 2.`
        0b1.011101101*0b10^-0b11011,

    ),

`#########################################################################`

    `$$$` Bits : (

        0bb,

        0bb00101110100010,

        0bb00101110_100010,

        0bo644,

        0bxA705E,

    ),

`#########################################################################`

    `$$$` Blob : (

        0xx,

        0xxA705E416,

        0xxA705_E416,

        0xb00101110_10001011,

        `A quote from Thomas Hobbes' "Leviathan", as UTF-8 text encoded in Base64.`
        0xy
            TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz
            IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg
            dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu
            dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo
            ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=,

    ),

`#########################################################################`

    `$$$` Text : (

        "",

        Ceres,

        "サンプル",

        "This isn't not escaped.\n",

        "\<0tx263A>\<0t65>",

        `One non-ordered quoted Text (or, one named attribute).`
        "sales",

        `Same thing but nonquoted.`
        sales,

        `One attribute name with a space in it.`
        "First Name",

        `One ordered nonquoted Text (or, one ordered attribute).`
        0t0,

        `Same Text value (or, one ordered attr written in format of a named).`
        "\<0t0>",

        `From a graduate student (in finals week), the following haiku:`
        "study, write, study,\n"
            "do review (each word) if time.\n"
            "close book. sleep? what's that?\n",

    ),

`#########################################################################`

    `$$$` Nesting : (

        ::person,

        person::birth_date,

        person::birth_date::year,

        the_db::stats::"samples by order",

    ),

`#########################################################################`

    `$$$` Duo : (

        `Duo of Integer.`
        (5: -3),

        `Duo of Text.`
        ("First Name": Joy),

        `Another Duo.`
        (x:y),

        `Same thing.`
        (x->y),

        `Same thing.`
        (y<-x),

    ),

`#########################################################################`

    `$$$` Lot : (

        `Zero members.`
        {},

        `One member.`
        { "The lonely only." },

        `Four members.`
        {
            Clubs  :  5,
            Diamonds,
            Hearts : 10,
            Spades : 20,
        },

    ),

`#########################################################################`

    `$$$` Kit : (

        `Zero attributes.`
        (),

        `One named attribute.`
        ("First Name": Joy,),

        `Same thing.`
        (::"First Name": Joy,),

        `One ordered attribute.`
        (53,),

        `Same thing.`
        (0t0: 53,),

        `Same thing.`
        ("\<0t0>": 53,),

        `Same thing.`
        (::0t0: 53,),

        `Three named attributes.`
        (
            login_name : hartmark,
            login_pass : letmein,
            is_special : 0bTRUE,
        ),

        `Same thing.`
        (
            ::login_name : hartmark,
            ::login_pass : letmein,
            ::is_special : 0bTRUE,
        ),

        `Three ordered attributes.`
        (hello,26,0bTRUE),

        `One of each.`
        (Jay, age: 10),

        `A non-Latin name.`
        ("サンプル": "http://example.com",),

        `Five leaf attributes in nested multi-level namespace.`
        (
            name: "John Glenn",
            birth_date::year: 1921,
            comment: "Fly!",
            birth_date::month: 7,
            birth_date::day: 18,
        ),

    ),

`#########################################################################`

    `$$$` Article : (

        Point*(x : 5, y : 3),

        Float*(
            significand : 45207196,
            radix       : 10,
            exponent    : 37,
        ),

        the_db::UTC_Date_Time*(
            year   : 2003,
            month  : 10,
            day    : 26,
            hour   : 1,
            minute : 30,
            second : 0.0,
        ),

        Positive_Infinity*(),

        Negative_Zero*(),

    ),

`#########################################################################`

    `$$$` Excuse : (

        Input_Field_Wrong!(name : "Your Age"),

        Div_By_Zero!(),

        No_Such_Attr_Name!(),

    ),

`#########################################################################`

    `$$$` Calendar_Time : (

        `No measurement was taken or specified at all.`
        (Calendar_Time:()),

        `Either an unspecified period in 1970 or a duration of 1970 years.`
        (Calendar_Time:(y:1970,)),

        `Either a civil calendar date 2015-5-3 or a duration of 2015y+5m+3d.`
        (Calendar_Time:(y:2015,m:5,d:3)),

        `Either a military calendar date 1998-300 or a duration of 1998y+300d.`
        (Calendar_Time:(y:1998,d:300)),

        `Either the 6th week of 1776 or a duration of 1776 years + 6 weeks.`
        (Calendar_Time:(y:1776,d:42)),

        `Either the first quarter of 1953 or a duration of 1953.25 years.`
        (Calendar_Time:(y:1953.25,)),

        `Either high noon on an unspecified day or a duration of 12 hours.`
        (Calendar_Time:(h:12,i:0,s:0)),

        `Either a fully specified civil date and time or a 6-part duration.`
        (Calendar_Time:(y:1884,m:10,d:17,h:20,i:55,s:30)),

        `Either an ancient date and time or a negative duration.`
        (Calendar_Time:(y-370,m:1,d:24,h:11,i:0,s:0)),

        `Either a time on some unspecified day or a duration of seconds.`
        (Calendar_Time:(s:5923.21124603,)),

    ),

`#########################################################################`

    `$$$` Calendar_Duration : (

        `Addition of 2 years and 3 months.`
        (Calendar_Duration:(y:2,m:3,d:0,h:0,i:0,s:0)),

        `Subtraction of 22 hours.`
        (Calendar_Duration:(y:0,m:0,d:0,h-22,i:0,s:0)),

    ),

`#########################################################################`

    `$$$` Calendar_Instant : (

        `The Day The Music Died (if paired with Gregorian calendar).`
        (Calendar_Instant:(y:1959,m:2,d:3)),

        `A time of day when one might have breakfast.`
        (Calendar_Instant:(h:7,i:30,s:0)),

        `What was now in the Pacific zone (if paired with Gregorian calendar).`
        (Calendar_Instant:((y:2018,m:9,d:3,h:20,i:51,s:17):(h:-8,i:0,s:0))),

        `A time of day in the UTC zone on an unspecified day.`
        (Calendar_Instant:((h:9,i:25,s:0):(h:0,i:0,s:0))),

        `A specific day and time in the Pacific Standard Time zone.`
        (Calendar_Instant:((y:2001,m:4,d:16,h:20,i:1,s:44):"PST")),

    ),

`#########################################################################`

    `$$$` Geographic_Point : (

        `No specified coordinates at all.`
        (Geographic_Point:()),

        `Just an elevation specified.`
        (Geographic_Point:("+":920,)),

        `Geographic surface coordinates of Googleplex; elevation not specified.`
        (Geographic_Point:(">":-122.0857017,"^":37.4218363)),

        `Same thing.`
        (Geographic_Point:("^":37.4218363,">":-122.0857017)),

        `Some location with all coordinates specified.`
        (Geographic_Point:(">":-101,"^":-70,"+":1000)),

        `Another place.`
        (Geographic_Point:(">":-94.746094,"^":37.483577)),

    ),

`#########################################################################`

    `$$$` Array : (

        `Zero members.`
        (Array:{}),

        `One member.`
        (Array:{ "You got it!" }),

        `Three members.`
        (Array:{
            Alphonse,
            Edward,
            Winry,
        }),

        `Five members (1 duplicate).`
        (Array:{
            57,
            45,
            63,
            61,
            63,
        }),

        `32 members (28 duplicates in 2 runs).`
        (Array:{
            "/",
            "*" : 20,
            "+" : 10,
            "-",
        }),

    ),

`#########################################################################`

    `$$$` Set : (

        `Zero members.`
        (Set:{}),

        `One member.`
        (Set:{ "I know this one!" }),

        `Four members (no duplicates).`
        (Set:{
            Canada,
            Spain,
            Jordan,
            Jordan,
            Thailand,
        }),

        `Three members.`
        (Set:{
            3,
            16,
            85,
        }),

        `Two members.`
        (Set:{
            21 : 1,
            62 : 0,
            3 : 1,
            101 : 0,
        }),

    ),

`#########################################################################`

    `$$$` Bag : (

        `Zero members.`
        (Bag:{}),

        `One member.`
        (Bag:{ "I hear that!": 1 }),

        `1200 members (1197 duplicates).`
        (Bag:{
            Apple  : 500,
            Orange : 300,
            Banana : 400,
        }),

        `Six members (2 duplicates).`
        (Bag:{
            Foo : 1,
            Quux : 1,
            Foo : 1,
            Bar : 1,
            Baz : 1,
            Baz : 1,
        }),

    ),

`#########################################################################`

    `$$$` Mix : (

        `Zero members; we measured zero of nothing in particular.`
        (Mix:{}),

        `One member; one gram of mass.`
        (Mix:{::Gram: 1.0}),

        `29.95 members (28.95 duplicates); the cost of a surgery.`
        (Mix:{::USD: 29.95}),

        `9.8 members; acceleration under Earth's gravity.`
        (Mix:{::Meter_Per_Second_Squared: 9.8}),

        `0.615 members (fractions of 3 distinct members); recipe.`
        (Mix:{
            ::Butter : 0.22,
            ::Sugar  : 0.1,
            ::Flour  : 0.275,
            ::Sugar  : 0.02,
        }),

        `4/3 members (fractions of 3 distinct members); this-mix.`
        (Mix:{
            Sugar: 1/3,
            Spice: 1/4,
            All_Things_Nice: 3/4,
        }),

        `-1.5 members; adjustment for recipe.`
        (Mix:{
            Rice: +4.0,
            Beans: -5.7,
            Carrots: +0.2,
        }),

    ),

`#########################################################################`

    `$$$` Interval : (

        `Empty interval (zero members).`
        (Interval:""),

        `Unit interval (one member).`
        (Interval:("":abc)),

        `Closed interval (probably 10 members, depending on the model used).`
        (Interval:("<=*<=":(1:10))),

        `Same thing.`
        (Interval:("..":(1:10))),

        `Left-closed, right-open interval; every Fraction x in [2.7<=x<9.3].`
        (Interval:("<=*<":(2.7:9.3))),

        `Left-open, right-closed interval; every Text x ordered in [a<x<=z].`
        (Interval:("<*<=":(a:z))),

        `Open interval; time period between Dec 6 and 20 excluding both.`
        (Interval:("<*<":(
              (Calendar_Instant:((y:2002,m:12,d:06):"UTC")),
            : (Calendar_Instant:((y:2002,m:12,d:20):"UTC")),
        ))),

        `Left-unbounded, right-closed interval; every Integer x where x <= 3.`
        (Interval:("*<=":3)),

        `Left-closed, right-unbounded interval; every Integer x where 29 <= x.`
        (Interval:("<=*":29)),

        `Universal interval; unbounded; every value of type system is a member.`
        (Interval:"*"),

    ),

`#########################################################################`

    `$$$` Interval_Set : (

        `Empty interval-set (zero members).`
        (Interval_Set:{}),

        `Unit interval-set (one member).`
        (Interval_Set:{(Interval:("":abc))}),

        `Probably 10 members, depending on the model used.`
        (Interval_Set:{(Interval:("<=*<=":(1:10)))}),

        `Same thing.`
        (Interval_Set:{(Interval:("..":(1:10)))}),

        `Probably 6 members.`
        (Interval_Set:{
            (Interval:("..":(1:3))),
            (Interval:(""  :6    )),
            (Interval:("..":(8:9))),
        }),

        `Every Integer x except for {4..13,22..28}`
        (Interval_Set:{*<=3,(Interval:("..":(14:21))),29<=*}),

        `Set of all valid Unicode code points.`
        (Interval_Set:{
            (Interval:("..":(     0:  0xD7FF))),
            (Interval:("..":(0xE000:0x10FFFF))),
        }),

        `Probably 15 members (no duplicates), depending on the model used.`
        (Interval_Set:{(Interval:("..":(1:10))),(Interval:("..":(6:15)))}),

        `Probably same thing, regardless of data model used.`
        (Interval_Set:{
            (Interval:("<=*<":( 1: 6)))  ,
            (Interval:(".."  :( 6:10))):2,
            (Interval:("<*<=":(10:15)))  ,
        }),

    ),

`#########################################################################`

    `$$$` Interval_Bag : (

        `Empty interval-bag (zero members).`
        (Interval_Bag:{}),

        `Unit interval-bag (one member).`
        (Interval_Bag:{(Interval:("":abc))}),

        `Five members (4 duplicates).`
        (Interval_Bag:{(Interval:("":def)):5}),

        `Probably 20 members (5 duplicates), depending on the model used.`
        (Interval_Bag:{(Interval:("<=*<=":(1:10))),(Interval:("<=*<=":(6:15)))}),

        `Same thing.`
        (Interval_Bag:{(Interval:("..":(1:10))),(Interval:("..":(6:15)))}),

        `Probably same thing, regardless of data model used.`
        (Interval_Bag:{
            (Interval:("<=*<":( 1: 6)))  ,
            (Interval:(".."  :( 6:10))):2,
            (Interval:("<*<=":(10:15)))  ,
        }),

    ),

`#########################################################################`

    `$$$` Pair : (

        `Pair of Integer.`
        (Pair:(5: -3)),

        `Pair of Text.`
        (Pair:("First Name": Joy)),

        `Another Pair.`
        (Pair:(x:y)),

        `Same thing.`
        (Pair:(x->y)),

        `Same thing.`
        (Pair:(y<-x)),

    ),

`#########################################################################`

    `$$$` Heading : (

        `Zero attributes.`
        (Heading:()),

        `One named attribute.`
        (Heading:(sales,)),

        `Same thing.`
        (Heading:("sales",)),

        `One ordered attribute.`
        (Heading:(0t0,)),

        `Same thing.`
        (Heading:("\<0t0>",)),

        `Three named attributes.`
        (Heading:(region,revenue,qty)),

        `Three ordered attributes.`
        (Heading:(0t0,0t1,0t2)),

        `One of each.`
        (Heading:(0t1,age)),

        `Some attribute names can only appear quoted.`
        (Heading:("Street Address",)),

        `A non-Latin name.`
        (Heading:("サンプル",)),

    ),

`#########################################################################`

    `$$$` Renaming : (

        `Zero renamings, a no-op.`
        (Renaming:()),

        `Also a no-op.`
        (Renaming:(age->age,)),

        `Rename one attribute.`
        (Renaming:(fname->first_name,)),

        `Same thing.`
        (Renaming:(first_name:fname,)),

        `Swap 2 named attributes.`
        (Renaming:(foo->bar,foo<-bar)),

        `Convert ordered names to nonordered.`
        (Renaming:(foo,bar)),

        `Same thing.`
        (Renaming:(0t0->foo,0t1->bar)),

        `Convert nonordered names to ordered.`
        (Renaming:(0t0<-foo,0t1<-bar)),

        `Swap 2 ordered attributes.`
        (Renaming:(0t0->0t1,0t0<-0t1)),

        `Same thing.`
        (Renaming:(0t1,0t0)),

        `Some attribute names can only appear quoted.`
        (Renaming:("First Name"->"Last Name",)),

    ),

`#########################################################################`

    `$$$` Tuple : (

        `Zero attributes.`
        (Tuple:()),

        `One named attribute.`
        (Tuple:("First Name": Joy,)),

        `One ordered attribute.`
        (Tuple:(53,)),

        `Three ordered attributes.`
        (Tuple:(hello,26,0bTRUE)),

        `One of each.`
        (Tuple:(Jay, age: 10)),

        `Two named attributes.`
        (Tuple:(
            name : Michelle,
            age  : 17,
        )),

        `Five leaf attributes in nested multi-level namespace.`
        (Tuple:(
            name: "John Glenn",
            birth_date::year: 1921,
            comment: "Fly!",
            birth_date::month: 7,
            birth_date::day: 18,
        )),

        `Same thing.`
        (Tuple:(
            name: "John Glenn",
            birth_date: (Tuple:(
                year: 1921,
                month: 7,
                day: 18,
            )),
            comment: "Fly!",
        )),

    ),

`#########################################################################`

    `$$$` Tuple_Array : (

        `Zero attributes + zero tuples.`
        (Tuple_Array:()),

        `Zero attributes + one tuple.`
        (Tuple_Array:{()}),

        `Three named attributes + zero tuples.`
        (Tuple_Array:(x,y,z)),

        `Three positional attributes + zero tuples.`
        (Tuple_Array:(0t0,0t1,0t2)),

        `Two named attributes + three tuples (1 duplicate).`
        (Tuple_Array:{
            (name: Amy     , age: 14),
            (name: Michelle, age: 17),
            (name: Amy     , age: 14),
        }),

        `Two positional attributes + two tuples.`
        (Tuple_Array:{
            (Michelle, 17),
            (Amy     , 14),
        }),

    ),

`#########################################################################`

    `$$$` Relation : (

        `Zero attributes + zero tuples.`
        (Relation:()),

        `Same thing.`
        (Relation:(():{})),

        `Zero attributes + one tuple.`
        (Relation:{()}),

        `Same thing.`
        (Relation:(():{()})),

        `Three named attributes + zero tuples.`
        (Relation:(x,y,z)),

        `Three positional attributes + zero tuples.`
        (Relation:(0t0,0t1,0t2)),

        `Two named attributes + two tuples.`
        (Relation:{
            (name: Michelle, age: 17),
            (name: Amy     , age: 14),
        }),

        `Same thing.`
        (Relation:(
                (name    , age),
            : {
                (Michelle, 17 ),
                (Amy     , 14 ),
            },
        )),

        `Two positional attributes + two tuples.`
        (Relation:{
            (Michelle, 17),
            (Amy     , 14),
        }),

        `Some people records.`
        (Relation:{
            (name : "Jane Ives", birth_date : (Calendar_Instant:(y:1971,m:11,d:06)),
                phone_numbers : (Set:{"+1.4045552995", "+1.7705557572"})),
            (name : "Layla Miller", birth_date : (Calendar_Instant:(y:1995,m:08,d:27)),
                phone_numbers : (Set:{})),
            (name : "岩倉 玲音", birth_date : (Calendar_Instant:(y:1984,m:07,d:06)),
                phone_numbers : (Set:{"+81.9072391679"})),
        }),

        `Same thing.`
        (Relation:(
                (name          , birth_date                           , phone_numbers),
            : {
                ("Jane Ives"   , (Calendar_Instant:(y:1971,m:11,d:06)), (Set:{"+1.4045552995", "+1.7705557572"})),
                ("Layla Miller", (Calendar_Instant:(y:1995,m:08,d:27)), (Set:{})),
                ("岩倉 玲音", (Calendar_Instant:(y:1984,m:07,d:06)), (Set:{"+81.9072391679"})),
            },
        )),

    ),

`#########################################################################`

    `$$$` Tuple_Bag : (

        `Zero attributes + zero tuples.`
        (Tuple_Bag:()),

        `Zero attributes + one tuple.`
        (Tuple_Bag:{()}),

        `Three named attributes + zero tuples.`
        (Tuple_Bag:(x,y,z)),

        `Three positional attributes + zero tuples.`
        (Tuple_Bag:(0t0,0t1,0t2)),

        `Two named attributes + six tuples (4 duplicates).`
        (Tuple_Bag:{
            (name: Michelle, age: 17),
            (name: Amy     , age: 14) : 5,
        }),

        `Two positional attributes + two tuples.`
        (Tuple_Bag:{
            (Michelle, 17),
            (Amy     , 14),
        }),

    ),

`#########################################################################`

)

`#########################################################################`
`#########################################################################`
